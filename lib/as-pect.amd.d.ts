/// <reference types="node" />
/// <reference types="yargs-parser" />
declare module "test/IWarning" {
    /**
     * This interface represents the shape of a warning.
     */
    export interface IWarning {
        type: string;
        message: string;
        stackTrace: string;
    }
}
declare module "util/ILogTarget" {
    import { LogValue } from "util/LogValue";
    /**
     * This interface describes the shape of an object that can contain log values.
     */
    export interface ILogTarget {
        logs: LogValue[];
    }
}
declare module "util/LogValue" {
    import { ILogTarget } from "util/ILogTarget";
    /**
     * A virtual representation of a discrete value logged to from AssemblyScript.
     */
    export class LogValue {
        /**
         * If a pointer is referenced, this is the precise memory location of the referenced block of
         * data.
         */
        pointer: number;
        /**
         * If a pointer is referenced and isn't a string, this is the size of the referenced block of
         * data.
         */
        offset: number;
        /**
         * If a pointer is referenced and ins't a string, this is an array of bytes to be logged byt the
         * logger.
         */
        bytes: number[];
        /**
         * This is a message generated by the TestSuite to be displayed in the logger.
         */
        message: string;
        /**
         * This is the relevant stack trace, filtered with the `/wasm/i` regex.
         */
        stack: string;
        /**
         * This is the referenced log target.
         */
        target: ILogTarget | null;
        /**
         * This is the raw logged value.
         */
        value: number | null;
    }
}
declare module "util/ActualValue" {
    import { LogValue } from "util/LogValue";
    /**
     * A class representing a reported expected or actual value. It shares a lot of properties with
     * LogValue, so those are copied over.
     */
    export class ActualValue extends LogValue {
        /**
         * An indicator if the actual expected value is negated.
         */
        negated: boolean;
    }
}
declare module "test/PerformanceLimits" {
    /**
     * This enum is a set of compile time constants that represent the performance limits to prevent
     * unsafe statistics gathering.
     */
    export const enum PerformanceLimits {
        MaxSamples = 10000,
        MaxTestRuntime = 5000,
        MinimumDecimalPlaces = 0
    }
}
declare module "test/TestResult" {
    import { LogValue } from "util/LogValue";
    import { ActualValue } from "util/ActualValue";
    import { ILogTarget } from "util/ILogTarget";
    /**
     * This is the data class that contains all the data about each `test()` or `it()` function defined
     * in the `AssemblyScript` module.
     */
    export class TestResult implements ILogTarget {
        /** This is the test function pointer. */
        functionPointer: number;
        /** The actual test's name or description. */
        name: string;
        /** The indicator to see if the test passed. */
        pass: boolean;
        /** The indicated to see if a test actually ran. */
        ran: boolean;
        /** The time in milliseconds indicating how long the test ran for each run. */
        times: number[];
        /** The reported actual value description. */
        actual: ActualValue | null;
        /** The reported expected value description. */
        expected: ActualValue | null;
        /** If the test failed, this is the message describing why the test failed. */
        message: string;
        /** A set of strings logged by the test itself. */
        logs: LogValue[];
        /** The generated stack trace if the test errored. */
        stack: string | null;
        /** This value is set to true if the test is expected to throw. */
        negated: boolean;
        /** This value indicates if performance statistics were collected for this test. */
        performance: boolean;
        /** This value indicates the maximum number of samples to collect. */
        maxSamples: number;
        /** This value indicates the maximum test runtime. */
        maxRuntime: number;
        /** The number of decimal places used for rounding. */
        decimalPlaces: number;
        /** This value indicates if an average should be calculated */
        calculateAverageValue: boolean;
        /** This value indicates if an average was calculated. */
        hasAverage: boolean;
        /** This is the average (mean) value. */
        average: number;
        /** This value indicates if a max value should be calculated. */
        calculateMaxValue: boolean;
        /** This value indicates if a max was calculated. */
        hasMax: boolean;
        /** This is the max time. */
        max: number;
        /** This value indicates if a median value should be calculated. */
        calculateMedianValue: boolean;
        /** This value indicates if a median value was calculated. */
        hasMedian: boolean;
        /** This is the calculated median time. */
        median: number;
        /** This value indicated if a min value should be calculated. */
        calculateMinValue: boolean;
        /** This value indicates if a min value was calculated. */
        hasMin: boolean;
        /** This is the calculated min time. */
        min: number;
        /** This value indicates if a standard deviation value should be calculated. */
        calculateStandardDeviationValue: boolean;
        /** This value indicates if a standard deviation value was calculated. */
        hasStdDev: boolean;
        /** This is the calculated standard deviation of the times collected. */
        stdDev: number;
        /** This value indicates if the variance should be calculated. */
        calculateVarianceValue: boolean;
        /** A boolean indicating if the variance was calcluated. */
        hasVariance: boolean;
        /** The raw variance calculation before rounding was applied. */
        rawVariance: number;
        /** This value indicates the calculated variance used for standard deviation calculations. */
        variance: number;
        /** This is the timestamp for when the test started in milliseconds. */
        start: number;
        /** This is the timestamp for when the test ended in milliseconds. */
        end: number;
        /** This is the run time for the test in milliseconds. */
        runTime: number;
        /**
         * Caclculate the average value of the collected times.
         */
        calculateAverage(): void;
        /**
         * Calculate the max time of the collected times.
         */
        calculateMax(): void;
        /**
         * Calculate the median value of the collected times.
         */
        calculateMedian(): void;
        /**
         * Calculate the min value of the collected times.
         */
        calculateMin(): void;
        /**
         * Calculate the standard deviation of the collected times.
         */
        calculateStandardDeviation(): void;
        /**
         * Calculate the variance.
         */
        calculateVariance(): void;
    }
}
declare module "test/TestGroup" {
    import { LogValue } from "util/LogValue";
    import { ILogTarget } from "util/ILogTarget";
    import { TestResult } from "test/TestResult";
    /**
     * This test group class is designed with a data oriented layout in mind. Each test property is
     * represented by an array.
     */
    export class TestGroup implements ILogTarget {
        /**
         * This is the set of function pointers that will be called before each test.
         */
        beforeEachPointers: number[];
        /**
         * This is the set of function pointers that will be called after each test.
         */
        afterEachPointers: number[];
        /**
         * This is the set of function pointers that will be called before each describe block.
         */
        beforeAllPointers: number[];
        /**
         * This is the set of function pointers that will be called after each describe block.
         */
        afterAllPointers: number[];
        /**
         * This is the list of tests that the `TestContext` ran for this group.
         */
        tests: TestResult[];
        /**
         * This is a list of "todos" that were collected for this group.
         */
        todos: string[];
        /**
         * This is the set of log values that were collected before and after the tests ran.
         */
        logs: LogValue[];
        /**
         * This is the name of the test.
         */
        name: string;
        /**
         * This is a value indicating if the group's tests passed successfully.
         */
        pass: boolean;
        /**
         * This is the reason that the group's tests did not pass.
         */
        reason: string;
        /**
         * This is how long the group ran in ms.
         */
        time: number;
        /**
         * A value indicating if this test group should run.
         */
        willRun: boolean;
        /**
         * The group start time.
         */
        start: number;
        /**
         * The group end time.
         */
        end: number;
        /**
         * This method creates a new TestGroup that contains a reference to all of the current flow
         * functions of this `TestGroup`.
         */
        fork(): TestGroup;
    }
}
declare module "test/TestReporter" {
    import { TestContext } from "test/TestContext";
    import { TestGroup } from "test/TestGroup";
    import { TestResult } from "test/TestResult";
    /**
     * This is the abstract shape of a `TestReporter`. It can be extended to create a `TestReporter`.
     */
    export abstract class TestReporter {
        /**
         * A function that is called when a test suite starts.
         *
         * @param {TestSuite} suite - The started test suite.
         */
        abstract onStart(suite: TestContext): void;
        /**
         * A function that is called when a test group starts.
         *
         * @param {TestGroup} group - The started test group.
         */
        abstract onGroupStart(group: TestGroup): void;
        /**
         * A function that is called when a test group ends.
         *
         * @param {TestGroup} group - The ended test group.
         */
        abstract onGroupFinish(group: TestGroup): void;
        /**
         * A function that is called when a test starts.
         *
         * @param {TestGroup} group - The current test group.
         * @param {TestResult} result - The generated test result reference that will be used for the test.
         */
        abstract onTestStart(group: TestGroup, result: TestResult): void;
        /**
         * A function that is called when a test ends.
         *
         * @param {TestGroup} group - The current test group.
         * @param {TestResult} result - The generated test result reference.
         */
        abstract onTestFinish(group: TestGroup, result: TestResult): void;
        /**
         * A function that is called when a test suite ends.
         *
         * @param {TestSuite} suite - The ended test suite.
         */
        abstract onFinish(suite: TestContext): void;
        /**
         * A function that is called when a test group reports a "todo" item.
         *
         * @param {TestGroup} group - The current test group.
         * @param {string} todo - The todo description.
         */
        abstract onTodo(group: TestGroup, todo: string): void;
    }
}
declare module "reporter/IWriteable" {
    /**
     * This interface is a utitily used to describe the shape of something that has a `write()` method.
     */
    export interface IWritable {
        write(chunk: string): void;
    }
}
declare module "reporter/DefaultTestReporter" {
    import { TestGroup } from "test/TestGroup";
    import { TestResult } from "test/TestResult";
    import { TestContext } from "test/TestContext";
    import { LogValue } from "util/LogValue";
    import { TestReporter } from "test/TestReporter";
    import { IWritable } from "reporter/IWriteable";
    /**
     * This is the default test reporter class for the `asp` command line application. It will pipe
     * all relevant details about each tests to the `stdout` WriteStream.
     */
    export class DefaultTestReporter extends TestReporter {
        protected stdout: IWritable | null;
        onStart(suite: TestContext): void;
        onGroupStart(group: TestGroup): void;
        onGroupFinish(group: TestGroup): void;
        onTestStart(_group: TestGroup, _test: TestResult): void;
        onTestFinish(_group: TestGroup, test: TestResult): void;
        onFinish(suite: TestContext): void;
        onTodo(_group: TestGroup, todo: string): void;
        /**
         * A custom logger function for the default reporter that writes the log values using `console.log()`
         *
         * @param {LogValue} logValue - A value to be logged to the console
         */
        onLog(logValue: LogValue): void;
    }
}
declare module "util/timeDifference" {
    /**
     * This method calculates the start and end time difference, rounding off to the nearest thousandth
     * of a millisecond.
     *
     * @param {number} end - The end time.
     * @param {number} start - The start time.
     */
    export const timeDifference: (end: number, start: number) => number;
}
declare module "util/IAspectExports" {
    /**
     * This is the shape of the exported functions provided by the `as-pect` test suite.
     */
    export interface IAspectExports {
        /**
         * This method calls a function pointer that matches the `() => void` type.
         *
         * @param {number} pointer - The function pointer.
         */
        __call(pointer: number): void;
        /**
         * This method is called when the tests are ready to run.
         */
        __ready(): void;
        /**
         * This method notifies the wasm module to send the current `Actual` value.
         */
        __sendActual(): void;
        /**
         * This method notifies the wasm module to send the current `Expected` value.
         */
        __sendExpected(): void;
        /**
         * This method notifies the `wasm` module to conditionally ignore `log<T>(value: T)` values
         * because a performance test is running.
         *
         * @param {1 | 0} value - A value indicating if calls to `log()` should be ignored.
         */
        __ignoreLogs(value: 1 | 0): void;
    }
}
declare module "util/IPerformanceConfiguration" {
    /**
     * This is the interface for performance configuration provided to the TestContext object, before
     * tests are run.
     */
    export interface IPerformanceConfiguration {
        /** Enable performance statistics gathering. */
        enabled?: boolean;
        /** Set the minimum number of samples to run for each test in milliseconds. */
        maxSamples?: number;
        /** Set the maximum test run time in milliseconds. */
        maxTestRunTime?: number;
        /** Report the median time in the default reporter. */
        reportMedian?: boolean;
        /** Report the average time in milliseconds. */
        reportAverage?: boolean;
        /** Report the standard deviation. */
        reportStandardDeviation?: boolean;
        /** Report the maximum run time in milliseconds. */
        reportMax?: boolean;
        /** Report the minimum run time in milliseconds. */
        reportMin?: boolean;
        /** Report the variance. */
        reportVariance?: boolean;
        /** Set the number of decimal places to round to. */
        roundDecimalPlaces?: number;
    }
    export function createDefaultPerformanceConfiguration(): IPerformanceConfiguration;
}
declare module "test/TestCollector" {
    import { ASUtil } from "assemblyscript/lib/loader";
    import { IAspectExports } from "util/IAspectExports";
    import { ActualValue } from "util/ActualValue";
    import { TestGroup } from "test/TestGroup";
    import { ILogTarget } from "util/ILogTarget";
    import { IWarning } from "test/IWarning";
    import { IPerformanceConfiguration } from "util/IPerformanceConfiguration";
    export interface ITestCollectorParameters {
        performanceConfiguration?: IPerformanceConfiguration;
        testRegex?: RegExp;
        groupRegex?: RegExp;
        fileName?: string;
    }
    /**
     * This class is responsible for collecting all the tests in a test binary.
     */
    export class TestCollector {
        protected wasm: (ASUtil & IAspectExports) | null;
        private groupStack;
        testGroups: TestGroup[];
        protected logTarget: ILogTarget;
        errors: IWarning[];
        fileName: string;
        protected stack: string;
        protected message: string;
        protected actual: ActualValue | null;
        protected expected: ActualValue | null;
        private performanceEnabledValue;
        private maxSamplesValue;
        private maxTestRunTimeValue;
        private roundDecimalPlacesValue;
        private recordAverageValue;
        private recordMedianValue;
        private recordStdDevValue;
        private recordMaxValue;
        private recordMinValue;
        private recordVariance;
        private performanceConfiguration;
        /**
         * This value is used to detect if an `expect()` function call was used outside of a test
         * function. If a reportExpected or reportActual function is called before the `context.run()`
         * method is called, it should prevent the `run()` method from running the tests and report a
         * failure.
         */
        protected ready: boolean;
        /**
         * These are the test and group filters for the binary. They must be provided before collection
         * begins.
         */
        protected testRegex: RegExp;
        protected groupRegex: RegExp;
        constructor(props?: ITestCollectorParameters);
        /**
         * Call this method to start the `__main()` method provided by the `as-pect` exports to start the
         * process of test collection.
         */
        protected collectTests(): void;
        /**
         * This method creates a WebAssembly imports object with all the TestContext functions
         * bound to the TestContext.
         *
         * @param {any[]} imports - Every import item specified.
         */
        createImports(...imports: any[]): any;
        /**
         * This is called to stop the debugger.  e.g. `node --inspect-brk asp`.
         */
        private debug;
        /**
         * This is a web assembly utility function that wraps a function call in a try catch block to
         * report success or failure.
         *
         * @param {number} pointer - The function pointer to call. It must accept no parameters and return
         * void.
         * @returns {1 | 0} - If the callback was run successfully without error, it returns 1, else it
         * returns 0.
         */
        protected tryCall(pointer: number): 1 | 0;
        /**
         * Log a null value to the reporter.
         */
        private logNull;
        /**
         * Log an array to the reporter.
         *
         * @param arrayPointer - The array pointer.
         */
        private logArray;
        /**
         * Log a reference to the reporter.
         *
         * @param {number} referencePointer - The pointer to the reference.
         * @param {number} offset - The offset of the reference.
         */
        private logReference;
        /**
         * This adds a logged string to the current test.
         *
         * @param {number} pointer - The pointer to the logged string reference.
         */
        private logString;
        /**
         * Log a numevalueric value to the reporter.
         *
         * @param {number} value - The value to be logged.
         * @param {1 | 0} signed - The value indicating if the number is signed.
         */
        private logValue;
        /**
         * Log a long value.
         *
         * @param suiteNamePointer - The boxed long value's pointer.
         */
        private logLong;
        /**
         * This web assembly linked function creates a test group. It's called when the test suite calls
         * the describe("test", callback) function from within AssemblyScript. It receives a pointer to
         * the description of the tests, forks the top level test group, pushes the suiteName to a list,
         * then pushes the forked group to the top of the test context stack.
         *
         * @param {number} suiteNamePointer
         */
        private reportDescribe;
        /**
         * This web assembly linked function finishes a test group. It's called when the test suite calls
         * the describe("test", callback) function from within AssemblyScript. It pops the current
         * test group from the test context stack and pushes it to the final test group list.
         */
        private reportEndDescribe;
        /**
         * This web assembly linked function sets the group's "beforeEach" callback pointer to
         * the current groupStackItem.
         *
         * @param {number} callbackPointer - The callback that should run before each test.
         */
        private reportBeforeEach;
        /**
         * This web assembly linked function adds the group's "beforeAll" callback pointer to
         * the current groupStackItem.
         *
         * @param {number} callbackPointer - The callback that should run before each test in the
         * current context.
         */
        private reportBeforeAll;
        /**
         * This web assembly linked function sets the group's "afterEach" callback pointer.
         *
         * @param {number} callbackPointer - The callback that should run before each test group.
         */
        private reportAfterEach;
        /**
         * This web assembly linked function adds the group's "afterAll" callback pointer to
         * the current groupStackItem.
         *
         * @param {number} callbackPointer - The callback that should run before each test in the
         * current context.
         */
        private reportAfterAll;
        /**
         * This web assembly linked function creates a test from the callback and the testNamePointer in
         * the current group. It assumes that the group has already been created with the describe
         * function. It is called when `it("description", callback)` or `test("description", callback)`
         * is called.
         *
         * @param {number} testNamePointer - The test's name pointer.
         * @param {number} callback - The test's function.
         */
        private reportTest;
        /**
         * This web assembly linked function is responsible for reporting tests that are expected
         * to fail. This is useful for verifying that specific application states will throw.
         *
         * @param {number} testNamePointer - The test's name pointer.
         * @param {number} callback - The test's function.
         * @param {number} message - The message associated with this test if it does not throw.
         */
        private reportNegatedTest;
        /**
         * This function reports a single "todo" item in a test suite.
         *
         * @param {number} todoPointer - The todo description string pointer.
         */
        private reportTodo;
        /**
         * This function reports an actual null value.
         */
        private reportActualNull;
        /**
         * This function reports an expected null value.
         *
         * @param {1 | 0} negated - An indicator if the expectation is negated.
         */
        private reportExpectedNull;
        /**
         * This function reports an actual numeric value.
         *
         * @param {number} numericValue - The value to be expected.
         * @param {1 | 0} signed - The value indicating if the value is signed.
         */
        private reportActualValue;
        /**
         * This function reports an expected numeric value.
         *
         * @param {number} numericValue - The expected value.
         * @param {1 | 0} signed - The value indicating if the value is signed.
         * @param {1 | 0} negated - An indicator if the expectation is negated.
         */
        private reportExpectedValue;
        /**
         * This function reports an actual long value.
         *
         * @param {number} boxPointer - The expected box pointer.
         * @param {1 | 0} signed - An indicator if the long value is signed.
         */
        private reportActualLong;
        /**
         * This function reports an actual reference value.
         *
         * @param {number} referencePointer - The actual reference pointer.
         * @param {number} offset - The size of the reference in bytes.
         */
        private reportActualReference;
        /**
         * This function reports an expected reference value.
         *
         * @param {number} referencePointer - The expected reference pointer.
         * @param {number} offset - The size of the reference in bytes.
         * @param {1 | 0} negated - An indicator if the expectation is negated.
         */
        private reportExpectedReference;
        /**
         * This function reports an expected long value.
         *
         * @param {number} boxPointer - The expected box pointer.
         * @param {1 | 0} signed - An indicator if the long value is signed.
         * @param {1 | 0} negated - An indicator if the expectation is negated.
         */
        private reportExpectedLong;
        /**
         * This function reports an expected truthy value.
         *
         * @param {1 | 0} negated - An indicator if the expectation is negated.
         */
        private reportExpectedTruthy;
        /**
         * This function reports an expected falsy value.
         *
         * @param {1 | 0} negated - An indicator if the expectation is negated.
         */
        private reportExpectedFalsy;
        /**
         * This function reports an expected finite value.
         *
         * @param {1 | 0} negated - An indicator if the expectation is negated.
         */
        private reportExpectedFinite;
        /**
         * This function reports an actual string value.
         *
         * @param {number} stringPointer - A pointer that points to the actual string.
         */
        private reportActualString;
        /**
         * This function reports an expected string value.
         *
         * @param {number} stringPointer - A pointer that points to the expected string.
         * @param {1 | 0} negated - An indicator if the expectation is negated.
         */
        private reportExpectedString;
        /**
         * This function overrides the provided AssemblyScript `env.abort()` function to catch abort
         * reasons.
         *
         * @param {number} reasonPointer - This points to the message value that causes the expectation to
         * fail.
         * @param {number} _fileNamePointer - The file name that reported the error. (Ignored)
         * @param {number} _line - The line that reported the error. (Ignored)
         * @param {number} _col - The column that reported the error. (Ignored)
         */
        private abort;
        /**
         * This web assembly linked function modifies the state machine to enable
         * performance for the following test.
         *
         * @param {1 | 0} value - A value indicating if performance should be enabled.
         */
        private performanceEnabled;
        /**
         * This web assembly linked function modifies the state machine to set the maximum number of
         * samples for the following test.
         *
         * @param {number} value - The maximum number of samples to collect for the following test.
         */
        private maxSamples;
        /**
         * This web assembly linked function modifies the state machine to set the maximum amount of
         * time to run the following test in milliseconds
         *
         * @param {number} value - The maximum number of milliseconds to run the following test.
         */
        private maxTestRunTime;
        /**
         * This web assembly linked function modifies the state machine to set the number of decimal places
         * to round all the statistics to.
         *
         * @param {number} value - The number of decimal places to round to.
         */
        private roundDecimalPlaces;
        /**
         * This web assembly linked function modifies the state machine to cause the next test to report
         * an average run time.
         *
         * @param {1 | 0} value - A boolean indicating if the average should be reported.
         */
        private reportAverage;
        /**
         * This web assembly linked function modifies the state machine to cause the next test to report
         * an median run time.
         *
         * @param {1 | 0} value - A boolean indicating if the median should be reported.
         */
        private reportMedian;
        /**
         * This web assembly linked function modifies the state machine to cause the next test to report
         * a standard deviation calculation on the run times.
         *
         * @param {1 | 0} value - A boolean indicating if the standard deviation should be reported.
         */
        private reportStdDev;
        /**
         * This web assembly linked function modifies the state machine to cause the next test to report
         * the maximum run time for this test.
         *
         * @param {1 | 0} value - A boolean indicating if the max should be reported.
         */
        private reportMax;
        /**
         * This web assembly linked function modifies the state machine to cause the next test to report
         * the minimum run time for this test.
         *
         * @param {1 | 0} value - A boolean indicating if the min should be reported.
         */
        private reportMin;
        /**
         * This web assembly linked function modifies the state machine to cause the next test to report
         * the variance of the run times for this test.
         *
         * @param {1 | 0} value - A boolean indicating if the min should be reported.
         */
        private reportVariance;
        /**
         * This method reports to the TestContext that an expect function call was used outside of the
         * intended test functions.
         */
        private reportInvalidExpectCall;
        /**
         * This method reports an actual array value.
         *
         * @param {number} arrayPointer - The Array pointer.
         */
        private reportActualArray;
        /**
         * This  method reports an expected array value.
         *
         * @param {number} arrayPointer - The Array pointer.
         * @param {1 | 0} negated - Is `1` if the expectation is negated.
         */
        private reportExpectedArray;
        /**
         * Gets an error stack trace.
         */
        private getErrorStackTrace;
        /**
         * Reset all the performance values to the configured values.
         */
        private resetPerformanceValues;
        /**
         * Gets a log stack trace.
         */
        private getLogStackTrace;
    }
}
declare module "test/TestContext" {
    import { ASUtil } from "assemblyscript/lib/loader";
    import { TestReporter } from "test/TestReporter";
    import { IAspectExports } from "util/IAspectExports";
    import { TestCollector, ITestCollectorParameters } from "test/TestCollector";
    import { IWritable } from "reporter/IWriteable";
    export interface ITestContextParameters extends ITestCollectorParameters {
        reporter?: TestReporter;
        stdout?: IWritable;
        stderr?: IWritable;
    }
    export class TestContext extends TestCollector {
        time: number;
        pass: boolean;
        startupTime: number;
        reporter: TestReporter;
        stdout: IWritable | null;
        stderr: IWritable | null;
        private endGroup;
        constructor(props?: ITestContextParameters);
        /**
         * Run the tests on the wasm module.
         */
        run(wasm: ASUtil & IAspectExports): void;
        private runGroup;
        /**
         * Run a given test.
         *
         * @param {RunContext} runContext - The current run context.
         * @param {TestGroup} group - The current run group.
         * @param {number} testIndex - The current test index.
         */
        private runTest;
        /**
         * Run the current test once and collect statistics.
         *
         * @param {RunContext} runContext - The current run context.
         * @param {TestGroup} group - The current test group.
         * @param {TestResult} result - The current test result.
         * @param {number} testIndex - The current test index.
         */
        private runTestCall;
        /**
         * Run the afterEach callbacks before running the test.
         *
         * @param {RunContext} runContext - The current run context.
         * @param {TestGroup} group - The current test group.
         * @param {TestResult} result - The current test result.
         */
        private runAfterEach;
        /**
         * Run the beforeEach callbacks before running the test.
         *
         * @param {RunContext} runContext - The current run context.
         * @param {TestGroup} group - The current test group.
         * @param {TestResult} result - The current test result.
         */
        private runBeforeEach;
        /**
         * Run the afterAll callbacks with the given runContext and group.
         *
         * @param {RunContext} runContext - The current run context.
         * @param {TestGroup} group - The current test group.
         */
        private runAfterAll;
        /**
         * Run the beforeAll callbacks with the given runContext and group.
         *
         * @param {RunContext} runContext - The current run context.
         * @param {TestGroup} group - The current test group.
         */
        private runBeforeAll;
    }
}
declare module "reporter/CSVTestReporter" {
    import { TestReporter } from "test/TestReporter";
    import { TestContext } from "test/TestContext";
    import { Stringifier } from "csv-stringify";
    import { WriteStream } from "fs";
    import { TestGroup } from "test/TestGroup";
    import { TestResult } from "test/TestResult";
    /**
     * This class is responsible for creating a csv file located at {testName}.spec.csv. It will
     * contain a set of tests with relevant pass and fail information.
     */
    export class CSVTestReporter extends TestReporter {
        protected output: Stringifier | null;
        protected fileName: WriteStream | null;
        onStart(suite: TestContext): void;
        onGroupStart(): void;
        onGroupFinish(): void;
        onFinish(): void;
        onTestStart(): void;
        onTestFinish(group: TestGroup, result: TestResult): void;
        onTodo(group: TestGroup, desc: string): void;
    }
}
declare module "reporter/EmptyReporter" {
    import { TestReporter } from "test/TestReporter";
    /**
     * This class can be used as a blank reporter to interface with the `TestContext` in the browser.
     * It will not report any information about the tests.
     */
    export class EmptyReporter extends TestReporter {
        onFinish(): void;
        onGroupFinish(): void;
        onGroupStart(): void;
        onStart(): void;
        onTestFinish(): void;
        onTestStart(): void;
        onTodo(): void;
    }
}
declare module "reporter/JSONTestReporter" {
    import { TestReporter } from "test/TestReporter";
    import { TestContext } from "test/TestContext";
    import { WriteStream } from "fs";
    import { TestGroup } from "test/TestGroup";
    import { TestResult } from "test/TestResult";
    /**
     * This class reports all relevant test statistics to a JSON file located at
     * `{testLocation}.spec.json`.
     */
    export class JSONTestReporter extends TestReporter {
        protected file: WriteStream | null;
        private first;
        onStart(suite: TestContext): void;
        onGroupStart(): void;
        onGroupFinish(): void;
        onFinish(): void;
        onTestStart(): void;
        onTestFinish(group: TestGroup, result: TestResult): void;
        onTodo(group: TestGroup, desc: string): void;
    }
}
declare module "reporter/SummaryTestReporter" {
    import { TestReporter } from "test/TestReporter";
    import { TestContext } from "test/TestContext";
    /**
     * This test reporter should be used when logging output and test validation only needs happen on
     * the group level. It is useful for CI builds and also reduces IO output to speed up the testing
     * process.
     */
    export class SummaryTestReporter extends TestReporter {
        onStart(): void;
        onGroupStart(): void;
        onGroupFinish(): void;
        onTestStart(): void;
        onTestFinish(): void;
        onTodo(): void;
        constructor();
        onFinish(suite: TestContext): void;
    }
}
declare module "util/IConfiguration" {
    import { TestReporter } from "test/TestReporter";
    import { IPerformanceConfiguration } from "util/IPerformanceConfiguration";
    /**
     * This is the shape of the compiler flags.
     */
    export interface ICompilerFlags {
        [flag: string]: string[];
    }
    /**
     * This is an interface describing the shape of an exported configuration for the
     * `as-pect.config.js` file. An empty object should be a valid `as-pect` configuration.
     */
    export interface IConfiguration {
        /**
         * A set of globs that denote files that must be used for testing.
         */
        include?: string[];
        /**
         * A set of globs that denote files that must be added to every compilation.
         */
        add?: string[];
        /**
         * The compiler flags needed for this test suite. Do not forget that a binary file must be output.
         */
        flags?: ICompilerFlags;
        /**
         * A set of regular expressions that are tested against the file names. If they match, the
         * files will be discluded.
         */
        disclude?: RegExp[];
        /**
         * The web assembly imports required for testing your module.
         */
        imports?: any;
        /**
         * Set the default performance measurement values.
         */
        performance?: IPerformanceConfiguration;
        /**
         * A custom reporter that extends the `TestReporter` class, and is responsible for generating log
         * output.
         */
        reporter?: TestReporter;
        /**
         * A regular expression that instructs the TestContext to only run tests that match this regex.
         */
        testRegex?: RegExp;
        /**
         * A regular expression that instructs the TestContext to only run groups that match this regex.
         */
        groupRegex?: RegExp;
        /**
         * Specifies if a wasm binary should be output. Default is false.
         */
        outputBinary?: boolean;
    }
}
declare module "cli/types" {
    /**
     * This method creates a types file to the current testing directory located at
     * `./assembly/__tests__/` for the current project.
     *
     * @param {string} assemblyFolder - The current `./assembly/` folder.
     * @param {string} testFolder - The current `./assembly/__tests__` folder.
     * @param {string} typesFile - The current types file location.
     * @param {string} typesFileSource - The types file source location.
     */
    export function types(assemblyFolder: string, testFolder: string, typesFile: string, typesFileSource: string): void;
}
declare module "cli/init" {
    /**
     * This method initializes a new test project. It is opinionated and reflects the needs of 99% of
     * AssemblyScript developers following the standard way of creating a new AssemblyScript project.
     *
     * @param {string} assemblyFolder - The `./assembly/` folder for the current project.
     * @param {string} testFolder - The `./assembly/__tests__/` folder for the current project.
     * @param {string} typesFile - The types file location for the current project.
     * @param {string} typesFileSource - The types file source location for `as-pect`.
     */
    export function init(assemblyFolder: string, testFolder: string, typesFile: string, typesFileSource: string): void;
}
declare module "cli/help" {
    /**
     * This method prints the help text.
     */
    export function help(): void;
}
declare module "cli/util/IYargs" {
    import yargsparser from "yargs-parser";
    /**
     * A utility interface that contains an argv property that has the command line arguments.
     */
    export interface IYargs {
        argv: yargsparser.Arguments;
    }
}
declare module "cli/util/collectPerformanceConfiguration" {
    import { IYargs } from "cli/util/IYargs";
    import { IPerformanceConfiguration } from "util/IPerformanceConfiguration";
    /**
     * This method collects the performance configuration values byref.
     *
     * @param {IYargs} yargs - The command line arguments
     * @param {IPerformanceConfiguration} performanceConfiguration - The effective performance configuration.
     */
    export function collectPerformanceConfiguration(yargs: IYargs, performanceConfiguration: IPerformanceConfiguration): void;
}
declare module "cli/util/collectReporter" {
    import { TestReporter } from "test/TestReporter";
    import { IYargs } from "cli/util/IYargs";
    /**
     * This method inspects the command line arguments and returns the corresponding TestReporter.
     *
     * @param {IYargs} yargs - The command line arguments.
     */
    export function collectReporter(yargs: IYargs): TestReporter;
}
declare module "cli/util/getTestEntryFiles" {
    import { IYargs } from "cli/util/IYargs";
    /**
     * This method returns a `Set<string>` of entry files for the compiler to compile.
     *
     * @param {IYargs} yargs - The command line arguments.
     * @param {string[]} include - An array of globs provided by the configuration.
     * @param {RegExp[]} disclude - An array of RegExp provided by the configuration.
     */
    export function getTestEntryFiles(yargs: IYargs, include: string[], disclude: RegExp[]): Set<string>;
}
declare module "cli/util/writeFile" {
    /**
     * This method promisifies the fs.writeFile function call, and is compatible with node 10.
     *
     * @param {string} file - The file location to write to.
     * @param {Uint8Array} contents - The file contents to write to the disk.
     */
    export function writeFile(file: string, contents: Uint8Array): Promise<void>;
}
declare module "cli/run" {
    import { IYargs } from "cli/util/IYargs";
    /**
     * This method actually runs the test suites in sequential order synchronously.
     *
     * @param {IYargs} yargs - The command line arguments.
     * @param {string[]} compilerArgs - The `asc` compiler arguments.
     */
    export function run(yargs: IYargs, compilerArgs: string[]): void;
}
declare module "cli/index" {
    /**
     * This is the cli entry point and expects an array of arguments from the command line.
     *
     * @param {string[]} args - The arguments from the command line
     */
    export function asp(args: string[]): void;
}
declare module "as-pect" {
    export * from "test/IWarning";
    export * from "test/TestContext";
    export * from "test/TestGroup";
    export * from "test/TestReporter";
    export * from "test/TestResult";
    export * from "test/TestCollector";
    export * from "reporter/CSVTestReporter";
    export * from "reporter/DefaultTestReporter";
    export * from "reporter/EmptyReporter";
    export * from "reporter/JSONTestReporter";
    export * from "reporter/SummaryTestReporter";
    export * from "util/ActualValue";
    export * from "util/IAspectExports";
    export * from "util/IConfiguration";
    export * from "util/ILogTarget";
    export * from "util/IPerformanceConfiguration";
    export * from "util/LogValue";
    export * from "cli/index";
}
//# sourceMappingURL=as-pect.amd.d.ts.map